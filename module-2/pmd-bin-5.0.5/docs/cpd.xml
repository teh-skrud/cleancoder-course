<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="428" tokens="2358">
<file line="5" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/java/ast/JavaParserVisitorAdapter.java"/>
<file line="68" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/java/rule/AbstractJavaRule.java"/>
<codefragment>
<![CDATA[
    public Object visit(JavaNode node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }

    public Object visit(ASTExtendsList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTImplementsList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeParameters node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberSelector node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeParameter node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeBound node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceBody node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceBodyDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEnumBody node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEnumConstant node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTReferenceType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTClassOrInterfaceType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeArguments node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeArgument node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTWildcardBounds node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTNormalAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMarkerAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSingleMemberAnnotation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValuePairs node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValuePair node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValue node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMemberValueArrayInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotationTypeDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotationTypeBody node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAnnotationTypeMemberDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }
    public Object visit(ASTAnnotationMethodDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTDefaultValue node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTRUNSIGNEDSHIFT node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTRSIGNEDSHIFT node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTCompilationUnit node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEnumDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAssertStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPackageDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTImportDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTypeDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFieldDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTVariableDeclarator node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTVariableDeclaratorId node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTVariableInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArrayInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMethodDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMethodDeclarator node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFormalParameters node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTFormalParameter node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConstructorDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTExplicitConstructorInvocation node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTInitializer node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimitiveType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTResultType node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTName node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTNameList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAssignmentOperator node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConditionalExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConditionalOrExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTConditionalAndExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTInclusiveOrExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTExclusiveOrExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAndExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEqualityExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTInstanceOfExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTRelationalExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTShiftExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAdditiveExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTMultiplicativeExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTUnaryExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPreIncrementExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPreDecrementExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPostfixExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTCastExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimaryExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimaryPrefix node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTPrimarySuffix node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLiteral node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBooleanLiteral node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTNullLiteral node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArguments node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArgumentList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTAllocationExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTArrayDimsAndInits node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLabeledStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBlock node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBlockStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTEmptyStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTStatementExpression node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSwitchStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSwitchLabel node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTWhileStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTDoStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTForStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTForInit node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTStatementExpressionList node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTForUpdate node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTBreakStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTContinueStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTSynchronizedStatement node, Object data) {
        return visit((JavaNode) node, data);
    }

    public Object visit(ASTTryStatement node, Object data) {
        return visit((JavaNode) node, data);
    }
    public Object visit(ASTResourceSpecification node, Object data) {
]]>
</codefragment>
</duplication>
<duplication lines="201" tokens="1101">
<file line="5" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/ecmascript/ast/EcmascriptParserVisitorAdapter.java"/>
<file line="104" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/ecmascript/rule/AbstractEcmascriptRule.java"/>
<codefragment>
<![CDATA[
    public Object visit(EcmascriptNode node, Object data) {
	node.childrenAccept(this, data);
	return null;
    }

    public Object visit(ASTArrayComprehension node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTArrayComprehensionLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTArrayLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTAssignment node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTAstRoot node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTBlock node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTBreakStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTCatchClause node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTComment node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTConditionalExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTContinueStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTDoLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTElementGet node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTEmptyExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTExpressionStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTForInLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTForLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTFunctionCall node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTFunctionNode node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTInfixExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTKeywordLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLabel node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLabeledStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTLetNode node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTName node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTNewExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTNumberLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTObjectLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTObjectProperty node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTParenthesizedExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTPropertyGet node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTRegExpLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTScope node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTStringLiteral node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTSwitchCase node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTSwitchStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTTryStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTUnaryExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTVariableDeclaration node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTVariableInitializer node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTWhileLoop node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTWithStatement node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlDotQuery node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlExpression node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlMemberGet node, Object data) {
	return visit((EcmascriptNode) node, data);
    }

    public Object visit(ASTXmlString node, Object data) {
	return visit((EcmascriptNode) node, data);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="184" tokens="600">
<file line="14" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/ParseException.java"/>
<file line="14" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/ParseException.java"/>
<codefragment>
<![CDATA[
public class ParseException extends net.sourceforge.pmd.lang.ast.ParseException {

  /**
   * This constructor is used by the method "generateParseException"
   * in the generated parser.  Calling this constructor generates
   * a new object of this type with the fields "currentToken",
   * "expectedTokenSequences", and "tokenImage" set.  The boolean
   * flag "specialConstructor" is also set to true to indicate that
   * this constructor was used to create this object.
   * This constructor calls its super class with the empty string
   * to force the "toString" method of parent class "Throwable" to
   * print the error message in the form:
   *     ParseException: <result of getMessage>
   */
  public ParseException(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal
                       )
  {
    super("");
    specialConstructor = true;
    currentToken = currentTokenVal;
    expectedTokenSequences = expectedTokenSequencesVal;
    tokenImage = tokenImageVal;
  }

  /**
   * The following constructors are for use by you for whatever
   * purpose you can think of.  Constructing the exception in this
   * manner makes the exception behave in the normal way - i.e., as
   * documented in the class "Throwable".  The fields "errorToken",
   * "expectedTokenSequences", and "tokenImage" do not contain
   * relevant information.  The JavaCC generated code does not use
   * these constructors.
   */

  public ParseException() {
    super();
    specialConstructor = false;
  }

  /** Constructor with message. */
  public ParseException(String message) {
    super(message);
    specialConstructor = false;
  }

  /**
   * This variable determines which constructor was used to create
   * this object and thereby affects the semantics of the
   * "getMessage" method (see below).
   */
  protected boolean specialConstructor;

  /**
   * This is the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * followng this token will (therefore) be the first error token.
   */
  public Token currentToken;

  /**
   * Each entry in this array is an array of integers.  Each array
   * of integers represents a sequence of tokens (by their ordinal
   * values) that is expected at this point of the parse.
   */
  public int[][] expectedTokenSequences;

  /**
   * This is a reference to the "tokenImage" array of the generated
   * parser within which the parse error occurred.  This array is
   * defined in the generated ...Constants interface.
   */
  public String[] tokenImage;

  /**
   * This method has the standard behavior when this object has been
   * created using the standard constructors.  Otherwise, it uses
   * "currentToken" and "expectedTokenSequences" to generate a parse
   * error message and returns it.  If this object has been created
   * due to a parse error, and you do not catch it (it gets thrown
   * from the parser), then this method is called during the printing
   * of the final stack trace, and hence the correct error message
   * gets displayed.
   */
  public String getMessage() {
    if (!specialConstructor) {
      return super.getMessage();
    }
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(eol).append("    ");
    }
    String retval = "Encountered \"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += " " + tokenImage[tok.kind];
      retval += " \"";
      retval += add_escapes(tok.image);
      retval += " \"";
      tok = tok.next;
    }
    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
    retval += "." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += "Was expecting:" + eol + "    ";
    } else {
      retval += "Was expecting one of:" + eol + "    ";
    }
    retval += expected.toString();
    return retval;
  }

  /**
   * The end of line string for this machine.
   */
  protected String eol = System.getProperty("line.separator", "\n");

  /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */
  protected String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

}
]]>
</codefragment>
</duplication>
<duplication lines="93" tokens="507">
<file line="5" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/jsp/ast/JspParserVisitorAdapter.java"/>
<file line="66" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/jsp/rule/AbstractJspRule.java"/>
<codefragment>
<![CDATA[
    public Object visit(JspNode node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }

    public Object visit(ASTCompilationUnit node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTContent node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspDirective node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspDirectiveAttribute node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspScriptlet node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspExpression node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspDeclaration node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspComment node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTText node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTUnparsedText node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTElExpression node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTValueBinding node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTCData node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTElement node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTAttribute node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTAttributeValue node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTJspExpressionInAttribute node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTCommentTag node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTDeclaration node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTDoctypeDeclaration node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTDoctypeExternalId node, Object data) {
        return visit((JspNode) node, data);
    }

    public Object visit(ASTHtmlScript node, Object data) {
        return visit((JspNode) node, data);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="105" tokens="478">
<file line="71" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2625" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 36);
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 6);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 6);
                  break;
               case 11:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 19:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 20:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if (curChar == 62 && kind > 72)
                     kind = 72;
                  break;
               case 25:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0xffffffe3ffffffffL & l) == 0L)
]]>
</codefragment>
</duplication>
<duplication lines="101" tokens="454">
<file line="75" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2629" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3574" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 6);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 6);
                  break;
               case 11:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 19:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 20:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if (curChar == 62 && kind > 72)
                     kind = 72;
                  break;
               case 25:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0xffffffe3ffffffffL & l) == 0L)
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="355">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="346">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="343">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="343">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="340">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="340">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="337">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="337">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="334">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="334">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="331">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="331">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="328">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="328">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="325">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="325">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="322">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="322">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="319">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="319">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="316">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="316">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="313">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="313">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="310">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="310">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="307">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="307">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="304">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="304">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="301">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="301">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="298">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="298">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="295">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="295">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="292">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="292">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="289">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="289">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="286">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="286">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="283">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="283">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="280">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="280">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="277">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="277">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="274">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="274">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="271">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="271">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="268">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="268">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="265">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="265">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="49" tokens="264">
<file line="311" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2865" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 6);
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 17);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 19);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 10);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 23);
                  break;
               case 21:
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="262">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="262">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="259">
<file line="1438" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="259">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="256">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="256">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="253">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="253">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="250">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="250">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="247">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="247">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="244">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="244">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="241">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="241">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="238">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="238">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="235">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="235">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="232">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="232">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="232">
<file line="9815" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1694" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[126];
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="229">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="229">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="227">
<file line="311" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2865" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3800" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 6);
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 17);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 19);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 10);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 23);
                  break;
               case 21:
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="226">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="226">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="223">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="223">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="220">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="220">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="217">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="217">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="216">
<file line="560" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/JavaCharStream.java"/>
<file line="418" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/SimpleCharStream.java"/>
<codefragment>
<![CDATA[
     buffer = null;
     bufline = null;
     bufcolumn = null;
  }

  /**
   * Method to adjust line and column numbers for the start of a token.
   */
  public void adjustBeginLineColumn(int newLine, int newCol)
  {
     int start = tokenBegin;
     int len;

     if (bufpos >= tokenBegin)
     {
        len = bufpos - tokenBegin + inBuf + 1;
     }
     else
     {
        len = bufsize - tokenBegin + bufpos + 1 + inBuf;
     }

     int i = 0, j = 0, k = 0;
     int nextColDiff = 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
     {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     }

     if (i < len)
     {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len)
        {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="214">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="214">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="211">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="211">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="208">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="208">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="205">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="205">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="205">
<file line="43" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/TokenMgrError.java"/>
<file line="152" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/ParseException.java"/>
<file line="152" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/ParseException.java"/>
<codefragment>
<![CDATA[
   protected static final String addEscapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="202">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="202">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="199">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="199">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="196">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="196">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="193">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="193">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="190">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="190">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="189">
<file line="81" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/JavaCharStream.java"/>
<file line="32" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/SimpleCharStream.java"/>
<codefragment>
<![CDATA[
  protected int inBuf = 0;
  protected int tabSize = 8;

  protected void setTabSize(int i) { tabSize = i; }
  protected int getTabSize(int i) { return tabSize; }

  protected void ExpandBuff(boolean wrapAround)
  {
     char[] newbuffer = new char[bufsize + 2048];
     int newbufline[] = new int[bufsize + 2048];
     int newbufcolumn[] = new int[bufsize + 2048];

     try
     {
        if (wrapAround)
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.arraycopy(buffer, 0, newbuffer,
                                             bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="187">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="187">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="186">
<file line="6069" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1172" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="185">
<file line="222" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2776" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3711" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAddStates(0, 2);
                  if (curChar == 92)
                     jjAddStates(14, 15);
                  break;
               case 0:
                  if (curChar == 123)
                     jjCheckNAddStates(3, 6);
                  break;
               case 1:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 3:
                  jjAddStates(16, 17);
                  break;
               case 6:
                  jjAddStates(18, 19);
                  break;
               case 8:
                  if (curChar == 125 && kind > 70)
                     kind = 70;
                  break;
               case 10:
                  if (curChar == 123)
                     jjCheckNAddStates(7, 10);
                  break;
               case 11:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 13:
                  jjAddStates(20, 21);
                  break;
               case 16:
                  jjAddStates(22, 23);
                  break;
               case 18:
                  if (curChar == 125 && kind > 71)
                     kind = 71;
                  break;
               case 21:
               case 23:
                  jjCheckNAddStates(11, 13);
                  break;
               case 28:
                  if (kind > 79)
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="184">
<file line="1439" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="184">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="181">
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="181">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="179">
<file line="1619" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2225" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="178">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="175">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="172">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="171">
<file line="9768" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1639" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="169">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="166">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="163">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="162">
<file line="526" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/JavaCharStream.java"/>
<file line="386" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/SimpleCharStream.java"/>
<codefragment>
<![CDATA[
     ReInit(dstream, 1, 1, 4096);
  }

  /** @return token image as String */
  public String GetImage()
  {
     if (bufpos >= tokenBegin)
        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                              new String(buffer, 0, bufpos + 1);
  }

  /** @return suffix */
  public char[] GetSuffix(int len)
  {
     char[] ret = new char[len];

     if ((bufpos + 1) >= len)
        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
     else
     {
        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
  }

  /** Set buffers back to null when finished. */
  public void Done()
  {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="160">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="159">
<file line="2428" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3481" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="157">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="154">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="154">
<file line="1494" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2101" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="151">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="148">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="147">
<file line="60" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/dcd/graph/ConstructorNode.java"/>
<file line="39" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/dcd/graph/MethodNode.java"/>
<codefragment>
<![CDATA[
	public int compareTo(ConstructorNode that) {
		// Order by name
		int cmp = this.getName().compareTo(that.getName());
		if (cmp == 0) {
			// Order by parameter list length
			cmp = this.getMember().getParameterTypes().length - that.getMember().getParameterTypes().length;
			if (cmp == 0) {
				// Order by parameter class name
				for (int i = 0; i < this.getMember().getParameterTypes().length; i++) {
					cmp = this.getMember().getParameterTypes()[i].getName().compareTo(
							that.getMember().getParameterTypes()[i].getName());
					if (cmp != 0) {
						break;
					}
				}
			}
		}
		return cmp;
	}

	public boolean equals(Object obj) {
		if (obj instanceof ConstructorNode) {
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="146">
<file line="213" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/JavaCharStream.java"/>
<file line="142" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/SimpleCharStream.java"/>
<codefragment>
<![CDATA[
  }

  protected void UpdateLineColumn(char c)
  {
     column++;

     if (prevCharIsLF)
     {
        prevCharIsLF = false;
        line += (column = 1);
     }
     else if (prevCharIsCR)
     {
        prevCharIsCR = false;
        if (c == '\n')
        {
           prevCharIsLF = true;
        }
        else
           line += (column = 1);
     }

     switch (c)
     {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (tabSize - (column % tabSize));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
  }

/** Read a character. */
  public char readChar() throws java.io.IOException
  {
     if (inBuf > 0)
     {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        return buffer[bufpos];
     }
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="145">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="142">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="139">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="138">
<file line="487" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/JavaCharStream.java"/>
<file line="346" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/ast/SimpleCharStream.java"/>
<codefragment>
<![CDATA[
  public JavaCharStream(java.io.InputStream dstream)
  {
     this(dstream, 1, 1, 4096);
  }

/** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, String encoding, int startline,
  int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException
  {
     ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }

/** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
  }
/** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, String encoding, int startline,
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="137">
<file line="1676" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4171" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        }
        BlockStatement();
      }
      t = jj_consume_token(RBRACE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (isPrecededByComment(t)) { jjtn000.setContainsComment(); }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="136">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="135">
<file line="1627" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2233" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="4181" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="134">
<file line="1494" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2101" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="3972" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
]]>
</codefragment>
</duplication>
<duplication lines="115" tokens="134">
<file line="9" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/Token.java"/>
<file line="9" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/Token.java"/>
<codefragment>
<![CDATA[
public class Token {

  /**
   * An integer that describes the kind of this token.  This numbering
   * system is determined by JavaCCParser, and a table of these numbers is
   * stored in the file ...Constants.java.
   */
  public int kind;

  /** The line number of the first character of this Token. */
  public int beginLine;
  /** The column number of the first character of this Token. */
  public int beginColumn;
  /** The line number of the last character of this Token. */
  public int endLine;
  /** The column number of the last character of this Token. */
  public int endColumn;

  /**
   * The string image of the token.
   */
  public String image;

  /**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * token manager has not read tokens beyond this one, this field is
   * set to null.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */
  public Token next;

  /**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToken field is null).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is null.
   */
  public Token specialToken;

  /**
   * An optional attribute value of the Token.
   * Tokens which are not used as syntactic sugar will often contain
   * meaningful values that will be used later on by the compiler or
   * interpreter. This attribute value is often different from the image.
   * Any subclass of Token that actually wants to return a non-null value can
   * override this method as appropriate.
   */
  public Object getValue() {
    return null;
  }

  /**
   * No-argument constructor
   */
  public Token() {}

  /**
   * Constructs a new token for the specified Image.
   */
  public Token(int kind)
  {
     this(kind, null);
  }

  /**
   * Constructs a new token for the specified Image and Kind.
   */
  public Token(int kind, String image)
  {
     this.kind = kind;
     this.image = image;
  }

  /**
   * Returns the image.
   */
  public String toString()
  {
     return image;
  }

  /**
   * Returns a new Token object, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simply add something like :
   *
   *    case MyParserConstants.ID : return new IDToken(ofKind, image);
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use sit in your lexical actions.
   */
  public static Token newToken(int ofKind, String image)
  {
     switch(ofKind)
     {
       default : return new Token(ofKind, image);
     }
  }

  public static Token newToken(int ofKind)
  {
     return newToken(ofKind, null);
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="133">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="130">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="127">
<file line="16" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/java/ast/AbstractJavaNode.java"/>
<file line="13" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/jsp/ast/AbstractJspNode.java"/>
<codefragment>
<![CDATA[
    public AbstractJavaNode(JavaParser parser, int id) {
        super(id);
        this.parser = parser;
    }

    public void jjtOpen() {
	if (beginLine == -1 && parser.token.next != null) {
	    beginLine = parser.token.next.beginLine;
	    beginColumn = parser.token.next.beginColumn;
	}
    }

    public void jjtClose() {
	if (beginLine == -1 && (children == null || children.length == 0)) {
	    beginColumn = parser.token.beginColumn;
	}
	if (beginLine == -1) {
	    beginLine = parser.token.beginLine;
	}
	endLine = parser.token.endLine;
	endColumn = parser.token.endColumn;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="127">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="124">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="123">
<file line="18" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/ecmascript/rule/EcmascriptRuleChainVisitor.java"/>
<file line="16" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/xml/rule/XmlRuleChainVisitor.java"/>
<codefragment>
<![CDATA[
public class EcmascriptRuleChainVisitor extends AbstractRuleChainVisitor {

    protected void indexNodes(List<Node> nodes, RuleContext ctx) {
	// Visit Nodes in DFS order
	Stack<Node> stack = new Stack<Node>();
	stack.addAll(nodes);
	Collections.reverse(stack);
	while (!stack.isEmpty()) {
	    Node node = stack.pop();
	    indexNode(node);
	    if (node.jjtGetNumChildren() > 0) {
		for (int i = node.jjtGetNumChildren() - 1; i >= 0; i--) {
		    stack.push(node.jjtGetChild(i));
		}
	    }
	}
    }

    protected void visit(Rule rule, Node node, RuleContext ctx) {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="123">
<file line="424" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="879" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setImage(content.toString());
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public String UnparsedText() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="121">
<file line="3485" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="6036" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      t = jj_consume_token(IDENTIFIER);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.setImage(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimaryPrefix() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="121">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="121">
<file line="2316" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="4213" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="119">
<file line="5503" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5570" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(RPAREN);
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                              checkForBadAnnotationUsage();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MarkerAnnotation() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="119">
<file line="9960" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1783" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
            case 54: jj_3_55(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="118">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="117">
<file line="3559" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4392" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
            jj_la1[93] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimarySuffix() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="117">
<file line="2358" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3493" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="117">
<file line="1650" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2319" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="4216" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="116">
<file line="5503" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5535" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5570" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(RPAREN);
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                              checkForBadAnnotationUsage();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MarkerAnnotation() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="116">
<file line="1110" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1766" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1853" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2033" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3627" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3916" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3993" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4101" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4838" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5460" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="190" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="115">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="115">
<file line="194" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="57" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new RuntimeException("Missing return statement in function");
  }

  final public void PackageDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="115">
<file line="429" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1290" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1431" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1922" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2090" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2131" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2245" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3699" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4492" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5711" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5992" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="679" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="112">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="112">
<file line="430" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1291" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1432" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1923" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2091" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2132" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2246" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3700" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4223" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4493" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5712" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5993" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="680" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="112">
<file line="429" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1290" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1431" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1922" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2090" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2131" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2245" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3699" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4492" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5711" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5992" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="679" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1168" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="112">
<file line="1241" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3019" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3168" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="112">
<file line="287" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2841" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="3776" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 28:
               case 30:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="111">
<file line="2501" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2798" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[66] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="111">
<file line="1891" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="1975" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="110">
<file line="2543" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2584" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2625" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2666" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2707" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2762" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2864" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2917" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2972" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3032" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        ConditionalAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="110">
<file line="3116" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3257" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3372" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  ( jjtn000 . getImage ( ) != null ));
    }
    }
  }

  final public void PreIncrementExpression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="110">
<file line="5083" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5301" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      Expression();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TryStatement() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="109">
<file line="1536" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3805" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="109">
<file line="3252" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3559" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4392" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000,  ( jjtn000 . getImage ( ) != null ));
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="109">
<file line="5020" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5370" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[124] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ThrowStatement() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="109">
<file line="777" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1373" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5795" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void EnumConstant() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="109">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1440" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="109">
<file line="4223" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1169" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="108">
<file line="2503" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2544" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2585" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2626" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2667" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2708" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2763" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2800" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2865" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2918" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2973" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3033" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3418" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="108">
<file line="4571" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4778" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoStatement() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="108">
<file line="283" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5020" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5370" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="108">
<file line="1013" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5894" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        ClassOrInterfaceBodyDeclaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceBodyDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="108">
<file line="1110" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1766" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1853" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2033" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3414" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3627" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3916" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3993" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4101" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4838" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5460" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="190" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="107">
<file line="236" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5052" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      Name();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="107">
<file line="429" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1290" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1431" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1922" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2090" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2131" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2245" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3113" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3699" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4492" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5711" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5992" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="679" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1168" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="107">
<file line="579" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="1350" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 60)
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="106">
<file line="605" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="946" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_consume_token(COMMA);
        ClassOrInterfaceType();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void EnumDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="106">
<file line="236" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4605" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5052" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      Name();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="106">
<file line="1538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3807" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5177" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="106">
<file line="1156" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5022" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5372" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="106">
<file line="779" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1014" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1375" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4451" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5797" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5895" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void EnumConstant() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="106">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1441" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="106">
<file line="9854" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1733" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
    for (int i = 0; i < 142; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="105">
<file line="28" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTFormalParameter.java"/>
<file line="21" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTLocalVariableDeclaration.java"/>
<codefragment>
<![CDATA[
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean hasSuppressWarningsAnnotationFor(Rule rule) {
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            if (jjtGetChild(i) instanceof ASTAnnotation) {
                ASTAnnotation a = (ASTAnnotation) jjtGetChild(i);
                if (a.suppresses(rule)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isArray() {
        return checkType() + checkDecl() > 0;
    }

    public int getArrayDepth() {
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="105">
<file line="285" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1156" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="105">
<file line="3144" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3173" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="105">
<file line="4135" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4571" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4778" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Block() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="105">
<file line="823" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="904" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1192" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2370" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5140" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeParameters() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="105">
<file line="5084" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5302" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5331" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TryStatement() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="105">
<file line="237" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1157" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5023" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5053" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5373" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="105">
<file line="1979" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="427" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="882" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
   jjtn000.setImage(s.toString());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeArguments() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="104">
<file line="3114" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4223" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  ( jjtn000 . getImage ( ) != null ));
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="104">
<file line="237" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="286" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5053" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="104">
<file line="1807" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5085" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5303" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5332" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="104">
<file line="431" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="947" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1292" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1433" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1682" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1924" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2092" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2133" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2247" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2320" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3454" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3701" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3848" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4177" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4224" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4291" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4494" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4882" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5215" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5613" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5713" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5994" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="681" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="104">
<file line="579" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="1350" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="1531" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<file line="2538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParserTokenManager.java"/>
<codefragment>
<![CDATA[
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 60)
]]>
</codefragment>
</duplication>
<duplication lines="105" tokens="104">
<file line="9" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/Token.java"/>
<file line="9" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/Token.java"/>
<file line="9" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/Token.java"/>
<codefragment>
<![CDATA[
public class Token {

  /**
   * An integer that describes the kind of this token.  This numbering
   * system is determined by JavaCCParser, and a table of these numbers is
   * stored in the file ...Constants.java.
   */
  public int kind;

  /** The line number of the first character of this Token. */
  public int beginLine;
  /** The column number of the first character of this Token. */
  public int beginColumn;
  /** The line number of the last character of this Token. */
  public int endLine;
  /** The column number of the last character of this Token. */
  public int endColumn;

  /**
   * The string image of the token.
   */
  public String image;

  /**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * token manager has not read tokens beyond this one, this field is
   * set to null.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */
  public Token next;

  /**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToken field is null).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is null.
   */
  public Token specialToken;

  /**
   * An optional attribute value of the Token.
   * Tokens which are not used as syntactic sugar will often contain
   * meaningful values that will be used later on by the compiler or
   * interpreter. This attribute value is often different from the image.
   * Any subclass of Token that actually wants to return a non-null value can
   * override this method as appropriate.
   */
  public Object getValue() {
    return null;
  }

  /**
   * No-argument constructor
   */
  public Token() {}

  /**
   * Constructs a new token for the specified Image.
   */
  public Token(int kind)
  {
     this(kind, null);
  }

  /**
   * Constructs a new token for the specified Image and Kind.
   */
  public Token(int kind, String image)
  {
     this.kind = kind;
     this.image = image;
  }

  /**
   * Returns the image.
   */
  public String toString()
  {
     return image;
  }

  /**
   * Returns a new Token object, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simply add something like :
   *
   *    case MyParserConstants.ID : return new IDToken(ofKind, image);
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use sit in your lexical actions.
   */
  public static Token newToken(int ofKind, String image)
  {
     switch(ofKind)
     {
]]>
</codefragment>
</duplication>
<duplication lines="2" tokens="103">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1441" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="103">
<file line="1113" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1769" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1856" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2036" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3563" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3630" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3919" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3996" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4104" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4396" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4841" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5463" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="193" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="103">
<file line="431" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="947" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1292" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1433" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1478" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1682" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1924" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2092" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2133" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2247" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2320" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3454" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3701" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3848" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4177" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4224" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4291" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4494" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4882" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5215" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5613" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5713" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5994" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="681" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="103">
<file line="522" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="654" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1616" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1807" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3145" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3174" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4136" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4572" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4779" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4911" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5085" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5271" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5303" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5332" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5506" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5573" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5645" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5832" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="713" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      ClassOrInterfaceBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExtendsList() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="102">
<file line="5644" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="6067" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(ASSIGN);
      MemberValue();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="102">
<file line="432" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="565" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="607" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="825" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="906" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="948" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1114" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1194" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1293" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1434" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1479" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1682" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1770" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1857" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1925" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2093" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2134" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2248" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2321" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2372" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3455" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3564" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3631" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3702" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3849" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3920" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3997" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4105" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4177" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4225" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4292" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4397" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4495" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4842" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4883" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5142" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5216" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5464" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5614" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5714" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5995" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="194" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="682" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="102">
<file line="237" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="522" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="654" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="780" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="869" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1015" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1157" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1376" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1539" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1616" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1807" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1979" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3145" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3174" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3488" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3808" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4136" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4452" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4572" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4779" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4911" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5023" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5053" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5085" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5178" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5271" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5303" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5332" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5373" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5506" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5573" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5645" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5798" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5832" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5896" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="6039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="277" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="713" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1001" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1058" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="101">
<file line="237" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1157" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5023" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5053" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5373" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="427" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="882" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="101">
<file line="286" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="522" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="654" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="780" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="869" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1015" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1376" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1539" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1616" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1807" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1979" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3145" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3174" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3488" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3808" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4136" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4452" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4572" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4779" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4911" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5085" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5178" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5271" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5303" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5332" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5506" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5573" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5645" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5798" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5832" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5896" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="6039" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="277" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="713" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1001" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1058" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="101">
<file line="238" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="433" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="523" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="566" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="608" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="655" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="781" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="826" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="870" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="907" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="949" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1016" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1115" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1158" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1195" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1294" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1377" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1435" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1480" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1540" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1617" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1683" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1771" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1808" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1858" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1926" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1980" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2094" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2135" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2249" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2322" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2373" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3146" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3175" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3456" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3489" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3565" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3632" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3703" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3809" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3850" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3921" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3998" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4106" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4137" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4178" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4226" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4293" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4398" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4453" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4496" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4541" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4573" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4607" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4780" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4843" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4884" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4912" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5024" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5054" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5086" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5143" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5179" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5217" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5272" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5304" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5333" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5374" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5465" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5507" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5539" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5574" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5615" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5646" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5715" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5799" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5833" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5897" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5996" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="6040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="195" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="278" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="683" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="714" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1002" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="1059" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="101">
<file line="606" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="947" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1682" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2320" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3454" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3848" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4177" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4291" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4882" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5215" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5613" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1170" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        ClassOrInterfaceType();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="100">
<file line="4703" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4987" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<codefragment>
<![CDATA[
          jj_consume_token(SEMICOLON);
          switch (jj_nt.kind) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case HEX_FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
            Expression();
            break;
          default:
            jj_la1[117] = jj_gen;
]]>
</codefragment>
</duplication>
<duplication lines="2" tokens="100">
<file line="1437" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="1441" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/cpp/ast/CppParserTokenManager.java"/>
<file line="2037" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<file line="2040" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, -1, -1, -1, -1, 1, 2, 4, 0, -1, 0, -1, 4, 0, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="100">
<file line="522" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="654" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1616" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1807" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3145" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3174" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4136" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4572" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4779" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4911" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5085" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5271" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5303" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5332" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5506" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5538" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5573" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5832" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="6068" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="713" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
      ClassOrInterfaceBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="100">
<file line="287" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="433" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="566" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="608" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="826" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="907" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="949" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1115" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1195" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1294" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1435" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1480" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1683" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1771" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1858" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1926" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2038" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2094" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2135" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2249" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2322" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="2373" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3456" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3565" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3632" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3703" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3850" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3921" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="3998" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4106" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4178" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4226" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4293" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4398" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4496" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4541" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4843" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="4884" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5143" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5217" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5465" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5615" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5715" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="5996" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="195" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="428" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="683" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<file line="883" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="100">
<file line="1478" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/java/ast/JavaParser.java"/>
<file line="1170" path="/home/andreas/PMD/source/pmd-github-cloned/pmd/target/generated-sources/javacc/net/sourceforge/pmd/lang/jsp/ast/JspParser.java"/>
<codefragment>
<![CDATA[
        jj_consume_token(RBRACKET);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }
]]>
</codefragment>
</duplication>
</pmd-cpd>